[{"path":"https://stranmax.github.io/rfintext/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 rfintext authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://stranmax.github.io/rfintext/articles/0-Preprocessing-PDF-docs.html","id":"data-collection","dir":"Articles","previous_headings":"","what":"Data collection","title":"0 Preprocessing PDF-docs","text":"Briefly, available policy documents found web received municipalities gathered together folder.","code":""},{"path":"https://stranmax.github.io/rfintext/articles/0-Preprocessing-PDF-docs.html","id":"preprocessing","dir":"Articles","previous_headings":"","what":"Preprocessing","title":"0 Preprocessing PDF-docs","text":"Roughly, divided three parts: Fixing non-readable pdf-format issue Converting pdf plain text file Unstructured plain text files structured corpus lemmatization Lemmatized files read single data frame R saved aspol dataset.","code":""},{"path":"https://stranmax.github.io/rfintext/articles/0-Preprocessing-PDF-docs.html","id":"pdf-problems","dir":"Articles","previous_headings":"Preprocessing","what":"1. PDF problems","title":"0 Preprocessing PDF-docs","text":"PDFs unreadable form unknown reason. Maybe scanned original paper documents? Whatever reason, fixed first. Technique used called OCR optical character recognition. Tool used OCRmyPDF. Tool run via docker container. Additionally Finnish language data package provided pipeline. done: Prequisite: * Docker desktop installed * Tesseract language data file Finnish downloaded: fin.traineddata Steps: 1. Create file named Dockerfile somewhere machine, put fin.traineddata file location 2. Copy paste following Dockerfile: Build docker image: Process PDFs Docker run powershell. Adjust loop syntax preferences/toolkit. directory , run ocrmypdf tool (actually ocrmypdf-fin ). Choose finnish language support -l option. use file name input output. case pdf updated place. even better, non- readable PDFs processed. already recognizable text pdf, skipped left .","code":"FROM jbarlow83/ocrmypdf:v16.0.4    # Example: add a tessdata_best file COPY fin.traineddata /usr/share/tesseract-ocr/5/tessdata/ docker build -t ocrmypdf-fin . cd C:\\path\\to\\my\\pdf-folder Get-ChildItem . -Filter *.pdf | foreach { docker run --rm -w /data -v \".:/data\" ocrmypdf-fin -l fin $_.Name $_.Name }"},{"path":"https://stranmax.github.io/rfintext/articles/0-Preprocessing-PDF-docs.html","id":"pdf-to-plain-text","dir":"Articles","previous_headings":"Preprocessing","what":"2. PDF to plain text","title":"0 Preprocessing PDF-docs","text":"Next want extract text pdf files. task use Poppler toolkit. Poppler tool example pdftools::pdf_text() uses reading PDF files. Reason use command line version pdftools::pdf_text() allow define options available command line far understand. importantly, command line let’s us leave -layout option tries keep original pdf layout resulted text file. creates problems multicolumn pdf converted multicolumn text file. use also poppler via docker container. ’s done. happens cd pdf folder, run utility pdftotext give input file. output file given, automatically created name input pdf file text file.","code":"docker pull minidocks/poppler  cd c:Path\\To\\My\\PDF-dir  Get-ChildItem . -Filter *.pdf | foreach { docker run --rm -v \".:/app\" -w /app minidocks/poppler pdftotext $_.Name }"},{"path":"https://stranmax.github.io/rfintext/articles/0-Preprocessing-PDF-docs.html","id":"lemmatization","dir":"Articles","previous_headings":"Preprocessing","what":"3. Lemmatization","title":"0 Preprocessing PDF-docs","text":"last, text tokenized classified Turku-neural-parse-pipeline toolkit. happens ? use ready made turkunlp docker image. choose cpu version image. (TODO: try get GPU version working) Make sure output UTF-8 encoded. cd directory text files. Loop text files run tool parse_plaintext finnish language model fi_tdt. Save output name _lemma.txt added end. NOTE!-Parallel option -ThrottleLimit works Powershell 7. Drop using Powershell version. NOTE!! Number cores best keep relatively , maybe two three depending much RAM available. Output files text files containing words CoNLL-U format. files read NLP::CoNLLUTextDocument() data frame.","code":"docker pull turkunlp/turku-neural-parser:latest-fi-en-sv-cpu  $OutputEncoding = [Console]::OutputEncoding = [Text.UTF8Encoding]::UTF8  cd C:\\Path\\To\\Your\\txt\\files  Get-ChildItem . -Filter *.txt | ForEach-Object -Parallel { Get-Content -Encoding utf8 $_.FullName |  docker run --rm -i turkunlp/turku-neural-parser:latest-fi-en-sv-cpu stream fi_tdt parse_plaintext > .\\$($_.BaseName)_lemm.txt } -ThrottleLimit 3"},{"path":"https://stranmax.github.io/rfintext/articles/2-Document-term-matrix.html","id":"bag-of-words-representation","dir":"Articles","previous_headings":"","what":"Bag-of-Words representation","title":"2 Document term matrix","text":"Pre processing aspol corpus calculating document term count (dtc) using bag--words representation (single word basic unit). Single term per document per row. Converting original corpus document term matrix. possible convert one format another quanteda::convert() function. example functions require data tm format.","code":"bow <- aspol |>   preprocess_corpus(kunta) |>   count(kunta, LEMMA, name = \"dtc\") bow #> # A tibble: 48,269 × 3 #>    kunta     LEMMA            dtc #>    <chr>     <chr>          <int> #>  1 Enontekiö A#talo             3 #>  2 Enontekiö Vapaa#aika         1 #>  3 Enontekiö aiheuttaa          3 #>  4 Enontekiö aika               7 #>  5 Enontekiö aika#väli          1 #>  6 Enontekiö ajatella           1 #>  7 Enontekiö alhainen           1 #>  8 Enontekiö alku               1 #>  9 Enontekiö alku#peräinen      1 #> 10 Enontekiö alku#puoli         1 #> 11 Enontekiö alue              17 #> 12 Enontekiö antaa              3 #> 13 Enontekiö arava#laina        1 #> 14 Enontekiö arava#rajoitus     1 #> 15 Enontekiö arvioida           1 #> 16 Enontekiö asettaa            2 #> 17 Enontekiö asia               3 #> 18 Enontekiö asiakas            3 #> 19 Enontekiö asian#mukainen     1 #> 20 Enontekiö asua               5 #> # ℹ 48,249 more rows dtm <- bow |>   cast_dfm(document = kunta, term = LEMMA, value = dtc)  # quanteda format   # cast_dtm(document = kunta, term = LEMMA, value = dtc)  # tm format dtm #> Document-feature matrix of: 68 documents, 3,038 features (76.63% sparse) and 0 docvars. #>              features #> docs          A#talo Vapaa#aika aiheuttaa aika aika#väli ajatella alhainen alku alku#peräinen alku#puoli alue antaa arava#laina arava#rajoitus arvioida asettaa asia asiakas asian#mukainen asua #>   Enontekiö        3          1         3    7         1        1        1    1             1          1   17     3           1              1        1       2    3       3              1    5 #>   Espoo            0          0         1   18         3        0        4    1             1          0  108     2           0              0        9      10    3       1              0   11 #>   Eura             0          0         1    5         0        0        1    0             0          0   10     1           0              0        3       1    1       6              0    7 #>   Hartola          0          1         2    5         0        0        0    0             0          0    4     0           0              0        3       0    0       0              0    6 #>   Hattula          0          0         0    6         0        0        0    1             0          0   17     1           0              0        0       1    1       0              0    3 #>   Helsinki         0          0         3   46         4        0        5   12             0          1  139     7           0              0       26      13    8       6              1   57 #>   Huittinen        2          0         0   13         1        5        2    0             0          0   16     3           0              0        4       3   13       4              0    8 #>   Hyvinkää         0          0         0    1         0        0        0    0             0          0    0     0           0              0        1       0    0       0              0    9 #>   Hämeenlinna      0          3         3    1         0        0        0    1             0          0   18     3           0              0        2       0   29       3              0   10 #>   Iitti            0          0         0    0         0        0        0    1             0          0   18     5           0              0        0       1    0       0              0    0 #>   Imatra           0          0         0    2         0        0        0    0             0          0    6     0           0              0        2       0    1       0              0   11 #>   Inkoo            0          0         1   11         1        0        1    2             0          0   26     4           0              0        0       5    2       0              0    3 #>   Joensuu          0          0         1   33         2        1        4    4             1          0  129     2           0              1        9      13    5       4              0   25 #>   Juva             0          0         2   13         5        0        2    3             0          0   19     2           1              0        1       2    2       3              0   10 #>   Järvenpää        0          0         0    2         0        0        0    0             0          0    7     1           0              0        0       3    2       0              0   11 #>   Kaarina          0          1         2   15         6        0        0    1             0          0   55     4           0              0        4       4    3       0              0    8 #>   Kalajoki         0          0         0    1         0        0        0    0             0          0    5     0           0              0        2       0    0       0              0    0 #>   Kauniainen       0          0         2   14         0        1        0    1             0          1  104     4           0              0       12       6    1       3              0   17 #>   Kemiönsaari      0          3         3   12         1        1        1    3             2          0  136    14           0              0        3       3    1       2              0    8 #>   Kerava           0          0         2    0         0        0        0    0             0          0   13     3           0              0        2       5    0       0              0    0 #> [ reached max_ndoc ... 48 more documents, reached max_nfeat ... 3,018 more features ] dtm |>   quanteda::convert(to = \"tm\") #> <<DocumentTermMatrix (documents: 68, terms: 3038)>> #> Non-/sparse entries: 48269/158315 #> Sparsity           : 77% #> Maximal term length: 27 #> Weighting          : term frequency (tf)"},{"path":"https://stranmax.github.io/rfintext/articles/2-Document-term-matrix.html","id":"ngrams","dir":"Articles","previous_headings":"","what":"Ngrams","title":"2 Document term matrix","text":"Bigram trigram","code":"ngram <- aspol |>    preprocess_corpus(kunta) |>    mutate(LEMMA2 = lead(LEMMA, default = \"\", n = 1),           LEMMA3 = lead(LEMMA, default = \"\", n = 2),           bigram = paste0(LEMMA, \" \",  LEMMA2),          trigram = paste0(LEMMA, \" \", LEMMA2, \" \", LEMMA3),          .by = kunta)  # c(kunta, sent) limits the words to same sentence count(ngram, bigram, sort = TRUE) #> # A tibble: 105,111 × 2 #>    bigram                          n #>    <chr>                       <int> #>  1 asunto#poliittinen ohjelma    573 #>  2 huone huone                   290 #>  3 kaupunki omistaa              193 #>  4 maa#poliittinen ohjelma       166 #>  5 henkilö henkilö               161 #>  6 kaupunki asunto#poliittinen   161 #>  7 ottaa huomio                  151 #>  8 erityis#ryhmä asuminen        143 #>  9 kaupunki kaupunki             129 #> 10 tehostaa palvelu#asuminen     127 #> 11 kunta omistaa                 123 #> 12 määrä kasvaa                  116 #> 13 valtio tukea                  112 #> 14 asuminen liittyä              109 #> 15 alue alue                     107 #> 16 keskusta alue                  83 #> 17 asunto#kunta määrä             81 #> 18 tukea asuminen                 80 #> 19 luoda edellytys                79 #> 20 kestävä kehitys                78 #> # ℹ 105,091 more rows count(ngram, trigram, sort = TRUE) #> # A tibble: 160,720 × 2 #>    trigram                                    n #>    <chr>                                  <int> #>  1 huone huone huone                        237 #>  2 kaupunki asunto#poliittinen ohjelma      134 #>  3 henkilö henkilö henkilö                  100 #>  4 kaupunki kaupunki asunto#ohjelma          64 #>  5 asuminen rahoitus kehittämis#keskus       47 #>  6 Rivi ketju#talo asuin#kerros#talo         44 #>  7 erillinen pien#talo Rivi                  44 #>  8 pien#talo Rivi ketju#talo                 44 #>  9 asunto#poliittinen ohjelma luonnos        42 #> 10 asunto#poliittinen ohjelma päivä          40 #> 11 huone huone tuntematon                    40 #> 12 ohjelma päivä hyvä                        40 #> 13 kaupunki#seutu maa#poliittinen ohjelma    39 #> 14 maan#käyttö asuminen liikenne             39 #> 15 huone tuntematon huone                    34 #> 16 kunta asunto#poliittinen ohjelma          34 #> 17 tuntematon huone huone                    34 #> 18 kiinnittää erityinen huomio               28 #> 19 valtio tukea asunto#tuotanto              28 #> 20 yksikkö kaupunki asunto#poliittinen       25 #> # ℹ 160,700 more rows ngram |>   count(kunta, bigram, name = \"n\") |>   cast_dfm(document = kunta, term = bigram, value = n) #> Document-feature matrix of: 68 documents, 105,111 features (97.90% sparse) and 0 docvars. #>              features #> docs          A#talo kaksio A#talo kiinteistö A#talo yhteinen Vapaa#aika asuminen aiheuttaa asiakas aiheuttaa paine aiheuttaa suora aika houkutella aika huhtikuu aika kuntalainen aika raportointi aika tontti aika valmistua aika yhtiö aika#väli suunnittelu ajatella kokonais#taloudellinen alhainen kiinteistö alku tuoda alku#peräinen kunto alku#puoli vuokra#asunto #>   Enontekiö               1                 1               1                   1                 1               1               1               1             1                1                1           1              1          1                     1                               1                   1          1                   1                        1 #>   Espoo                   0                 0               0                   0                 0               0               0               0             0                0                0           0              1          0                     1                               0                   0          0                   0                        0 #>   Eura                    0                 0               0                   0                 0               0               0               0             0                0                0           0              0          0                     0                               0                   0          0                   0                        0 #>   Hartola                 0                 0               0                   0                 0               0               0               0             0                0                0           0              0          0                     0                               0                   0          0                   0                        0 #>   Hattula                 0                 0               0                   0                 0               0               0               0             0                0                0           0              0          0                     0                               0                   0          0                   0                        0 #>   Helsinki                0                 0               0                   0                 0               0               0               0             0                0                0           0              2          0                     0                               0                   0          0                   0                        0 #>   Huittinen               0                 0               0                   0                 0               0               0               0             0                0                0           0              0          0                     0                               0                   0          0                   0                        0 #>   Hyvinkää                0                 0               0                   0                 0               0               0               0             0                0                0           0              0          0                     0                               0                   0          0                   0                        0 #>   Hämeenlinna             0                 0               0                   1                 0               0               0               0             0                0                0           0              0          0                     0                               0                   0          0                   0                        0 #>   Iitti                   0                 0               0                   0                 0               0               0               0             0                0                0           0              0          0                     0                               0                   0          0                   0                        0 #>   Imatra                  0                 0               0                   0                 0               0               0               0             0                0                0           0              0          0                     0                               0                   0          0                   0                        0 #>   Inkoo                   0                 0               0                   0                 0               0               0               0             0                0                0           0              0          0                     0                               0                   0          0                   0                        0 #>   Joensuu                 0                 0               0                   0                 0               0               0               0             0                0                0           0              0          0                     0                               0                   0          0                   0                        0 #>   Juva                    0                 0               0                   0                 0               0               0               0             0                0                0           0              0          2                     0                               0                   0          0                   0                        0 #>   Järvenpää               0                 0               0                   0                 0               0               0               0             0                0                0           0              0          0                     0                               0                   0          0                   0                        0 #>   Kaarina                 0                 0               0                   0                 0               0               0               0             0                0                0           1              1          0                     0                               0                   0          0                   0                        0 #>   Kalajoki                0                 0               0                   0                 0               0               0               0             0                0                0           0              0          0                     0                               0                   0          0                   0                        0 #>   Kauniainen              0                 0               0                   0                 0               0               0               0             0                0                0           0              0          0                     0                               0                   0          0                   0                        0 #>   Kemiönsaari             0                 0               0                   2                 0               0               0               0             0                0                0           1              0          0                     0                               0                   0          0                   1                        0 #>   Kerava                  0                 0               0                   0                 0               0               0               0             0                0                0           0              0          0                     0                               0                   0          0                   0                        0 #> [ reached max_ndoc ... 48 more documents, reached max_nfeat ... 105,091 more features ] ngram |>   count(kunta, trigram, name = \"n\") |>   cast_dfm(document = kunta, term = trigram, value = n) #> Document-feature matrix of: 68 documents, 160,720 features (98.45% sparse) and 0 docvars. #>              features #> docs          A#talo kaksio kaksio A#talo kiinteistö perus#korjata A#talo yhteinen sauna Vapaa#aika asuminen lisääntyä aiheuttaa asiakas tulla aiheuttaa paine vuokra#asuminen aiheuttaa suora sähkö#lämmitys aika houkutella paikallinen aika huhtikuu alku aika kuntalainen matkailija aika raportointi konserni#johto aika tontti pari#talo aika valmistua pien#talo aika yhtiö tulla aika#väli suunnittelu tuottavuus ajatella kokonais#taloudellinen vaihto#ehto alhainen kiinteistö huono#kuntoinen alku tuoda paikka#kunta alku#peräinen kunto perus#korjata alku#puoli vuokra#asunto kysyntä #>   Enontekiöspoouraartola                        0                               0                     0                             0                       0                               0                              0                           0                  0                           0                               0                     0                        0                0                                0                                           0                                   0                       0                                 0                                0 #>   Hattulaelsinkiuittinen                      0                               0                     0                             0                       0                               0                              0                           0                  0                           0                               0                     0                        0                0                                0                                           0                                   0                       0                                 0                                0 #>   Hyvinkääämeenlinnaittimatrankoooensuuuvaärvenpääaarinaalajokiauniainenemiönsaarierava                         0                               0                     0                             0                       0                               0                              0                           0                  0                           0                               0                     0                        0                0                                0                                           0                                   0                       0                                 0                                0 #> [ reached max_ndoc ... 48 more documents, reached max_nfeat ... 160,700 more features ]"},{"path":"https://stranmax.github.io/rfintext/articles/3-Topic-modeling.html","id":"topic-modeling-with-latent-dirichlet-allocation-lda-","dir":"Articles","previous_headings":"","what":"Topic modeling with latent Dirichlet allocation (LDA).","title":"3 Topic modeling","text":"","code":"library(rfintext) library(quanteda) library(tidytext) library(topicmodels)  # LDA library(topicdoc)  # Coherence score library(dplyr)  # Tidyverse friends library(tidyr)  # Tidyverse friends library(tibble) library(forcats)  # Tidyverse friends library(purrr)  # Tidyverse friends library(tidyr)  # Tidyverse friends library(ggplot2)  # Tidyverse friends library(cowplot)  # Multiple plots made easy library(future)  # Parallel processing back-end library(furrr)  # Parallel processing front-end with future_ functions plan(multisession, workers = availableCores(logical = FALSE) - 1)  # Utilize multiple cores on time consuming tasks."},{"path":"https://stranmax.github.io/rfintext/articles/3-Topic-modeling.html","id":"data","dir":"Articles","previous_headings":"Topic modeling with latent Dirichlet allocation (LDA).","what":"Data","title":"3 Topic modeling","text":"","code":"dtm <- aspol |>   preprocess_corpus(kunta) |>   count(kunta, LEMMA) |>   cast_dfm(kunta, LEMMA, n)  # n is default name from dplyr::count() dtm #> Document-feature matrix of: 68 documents, 3,038 features (76.63% sparse) and 0 docvars. #>              features #> docs          A#talo Vapaa#aika aiheuttaa aika aika#väli ajatella alhainen alku alku#peräinen alku#puoli alue antaa arava#laina arava#rajoitus arvioida asettaa asia asiakas asian#mukainen asua #>   Enontekiö        3          1         3    7         1        1        1    1             1          1   17     3           1              1        1       2    3       3              1    5 #>   Espoo            0          0         1   18         3        0        4    1             1          0  108     2           0              0        9      10    3       1              0   11 #>   Eura             0          0         1    5         0        0        1    0             0          0   10     1           0              0        3       1    1       6              0    7 #>   Hartola          0          1         2    5         0        0        0    0             0          0    4     0           0              0        3       0    0       0              0    6 #>   Hattula          0          0         0    6         0        0        0    1             0          0   17     1           0              0        0       1    1       0              0    3 #>   Helsinki         0          0         3   46         4        0        5   12             0          1  139     7           0              0       26      13    8       6              1   57 #>   Huittinen        2          0         0   13         1        5        2    0             0          0   16     3           0              0        4       3   13       4              0    8 #>   Hyvinkää         0          0         0    1         0        0        0    0             0          0    0     0           0              0        1       0    0       0              0    9 #>   Hämeenlinna      0          3         3    1         0        0        0    1             0          0   18     3           0              0        2       0   29       3              0   10 #>   Iitti            0          0         0    0         0        0        0    1             0          0   18     5           0              0        0       1    0       0              0    0 #>   Imatra           0          0         0    2         0        0        0    0             0          0    6     0           0              0        2       0    1       0              0   11 #>   Inkoo            0          0         1   11         1        0        1    2             0          0   26     4           0              0        0       5    2       0              0    3 #>   Joensuu          0          0         1   33         2        1        4    4             1          0  129     2           0              1        9      13    5       4              0   25 #>   Juva             0          0         2   13         5        0        2    3             0          0   19     2           1              0        1       2    2       3              0   10 #>   Järvenpää        0          0         0    2         0        0        0    0             0          0    7     1           0              0        0       3    2       0              0   11 #>   Kaarina          0          1         2   15         6        0        0    1             0          0   55     4           0              0        4       4    3       0              0    8 #>   Kalajoki         0          0         0    1         0        0        0    0             0          0    5     0           0              0        2       0    0       0              0    0 #>   Kauniainen       0          0         2   14         0        1        0    1             0          1  104     4           0              0       12       6    1       3              0   17 #>   Kemiönsaari      0          3         3   12         1        1        1    3             2          0  136    14           0              0        3       3    1       2              0    8 #>   Kerava           0          0         2    0         0        0        0    0             0          0   13     3           0              0        2       5    0       0              0    0 #> [ reached max_ndoc ... 48 more documents, reached max_nfeat ... 3,018 more features ]"},{"path":"https://stranmax.github.io/rfintext/articles/3-Topic-modeling.html","id":"topic-model","dir":"Articles","previous_headings":"Topic modeling with latent Dirichlet allocation (LDA).","what":"Topic model","title":"3 Topic modeling","text":"Let’s get straight business. Unsupervised classification LDA: LDA needs one parameter k. Finding optimal values evaluating coherence score. use pre calculated data set lda_models running classification every time wastes time. Data set lda_models includes mean semantic coherence calclulated different topic sizes random seeds. example code snippet used run multiple models. Note! Following take time normal computer. cloud computing environment machine 40 cores 177 Gb RAM calculating 1400 models K = 3:35 50 different random seeds every K took less one hour. running locally adjust number K S values accordingly. Note. Now function rfintext::calculate_semantic_coherence() task  Visually selecting potentially best k value/values. Let’s pick value 18 k.  can see lowest quantile K=18 higher K 7 . Lower quantile coherence score (horizontal dashed line) even higher example highest quantile K=10. variation lesser degree k values 10. NOTE! Coherence scores can change even smallest adjustments pre processing pipeline. Make mind first stick . Highest coherence values: 18 Train models optimal k different random seeds. Extract beta theta matrices probabilities terms per topic documents per topic repectively. Note! tidytext::tidy() uses term gamma-matrix research field term theta-matrix used describe probability distribution topics per document. rename gamma theta. get confused point come around gamma instead theta. Let’s try calculate much similarity topics different models. Similarity certain topics different models indicate reliable topics. TODO: Set probabilities top 10-40 terms zero calculate cosine similarity topic pairs.  calculated correlation topics one model another model model topic pairs. Threshold similarity set 0.9. Expected value one matching topic every model 1 divided number topics (red dashed line). Topics 1 3 seems appear models. hand topics 8 13 seem rather unique models. calculated 50 different models k value get better picture ’s going . TODO: Set probabilities 10-40 probable terms 0. Calculate cosine similarity topic-model pairs. Define similarity threshold 0.5-0.7 Summarise total similarity different topics. old work! Next parts look ugly hopefully work. take look correlation topics different models see different models catch things. Compare possible pairs models: choose final model(s) largest coherence score. common different topics ?  Topics 5 common large margin. Rarest topics 1 7. share largest topic per document?  figure gives good idea main topics cover large part whole document. Topics 1, 7, 12, 15 18 cover large part document. take look topics . Remainder: common topic 5, rarest 1 7. Main topics 1, 7, 12, 15 18.  unique terms topic.","code":"rfintext::lda_models #> # A tibble: 1,400 × 3 #>        K       S mean_coherence #>    <int>   <int>          <dbl> #>  1     3 3146759          -9.41 #>  2     3 3815732          -7.86 #>  3     3 7380638          -5.34 #>  4     3 8592264          -6.60 #>  5     3 1442259          -7.08 #>  6     3 1651155          -7.13 #>  7     3 9578454          -6.74 #>  8     3 2653332          -6.09 #>  9     3 1929552         -10.8  #> 10     3 6003578          -8.37 #> # ℹ 1,390 more rows # set.seed(342024) # random_seeds <- sample.int(9999999, 10)  # 3476154 5039353 8550496 7292293 5500417 7137547 6622604 9458765 3952778 8167640 # # ptm <- proc.time() # lda_models <- expand_grid(K = 3:30, S = random_seeds) |> #   mutate( #     # LDA models #     lda = future_map2( #       K, S, \\(k, s)  { #         LDA(convert(bow, to = \"tm\"), k = k, control = list(seed = s)) #       }, #       .options = furrr_options(seed = NULL) #     ), #     # Model coherence #     mean_coherence = future_map_dbl( #       lda, \\(x) { #         mean(topic_coherence(x, bow)) #       } #     ) #   ) # proc.time() - ptm # lda_models p <- lda_models |>   ggplot(aes(x = as.factor(K), y = mean_coherence)) +   geom_boxplot() +   labs(subtitle = \"LDA model coherence with different topic numbers\",         x = \"k (number of topics)\", y = \"Mean coherence\") p # optimal_k <- c(5, 9, 11, 15, 20) # optimal_k <- c(5, 7, 10, 15, 21) # optimal_k <- c(3, 5, 15) optimal_k <- 18 q <- lda_models |>   filter(K %in% optimal_k) |>   pull(mean_coherence) |>   quantile() q25 <- q[\"25%\"] p +   # geom_vline(xintercept = optimal_k, linetype='dashed', color=c('red')) +   geom_hline(yintercept = q25, linetype='dashed', color=c('red')) +   # lapply(optimal_k, function(x) {geom_text(aes(x=x+1, label=x, y=-5), colour=\"red\", angle=90)}) +   labs(subtitle = \"Optimal k values\",        x = \"k (number of topics)\", y = \"Mean coherence\") optimal_params <- lda_models |>   filter(K %in% optimal_k) |>   slice_max(mean_coherence, n = 5) optimal_params #> # A tibble: 5 × 3 #>       K       S mean_coherence #>   <int>   <int>          <dbl> #> 1    18 5883911          -9.39 #> 2    18 9596041          -9.55 #> 3    18 1001069          -9.59 #> 4    18 3146759          -9.77 #> 5    18 5745450          -9.79 ptm <- proc.time() selected_models <- optimal_params |>   mutate(     lda = future_map2(K, S, \\(k, s) {       LDA(dtm, k = k, control = list(seed = s))     }, .options = furrr_options(seed = NULL))   ) proc.time() - ptm #>    user  system elapsed  #>   3.195   0.087 101.637 selected_models #> # A tibble: 5 × 4 #>       K       S mean_coherence lda       #>   <int>   <int>          <dbl> <list>    #> 1    18 5883911          -9.39 <LDA_VEM> #> 2    18 9596041          -9.55 <LDA_VEM> #> 3    18 1001069          -9.59 <LDA_VEM> #> 4    18 3146759          -9.77 <LDA_VEM> #> 5    18 5745450          -9.79 <LDA_VEM> selected_models <- selected_models |>   mutate(     # Beta matrix     beta = map(       lda, \\(x) tidy(x, matrix = \"beta\")     ),     # Theta matrix (gamma)     theta = map(       lda, \\(x) {         tidy(x, matrix = \"gamma\") |>            rename(theta = gamma)       }     )   ) selected_models #> # A tibble: 5 × 6 #>       K       S mean_coherence lda       beta                  theta    #>   <int>   <int>          <dbl> <list>    <list>                <list>   #> 1    18 5883911          -9.39 <LDA_VEM> <tibble [54,684 × 3]> <tibble> #> 2    18 9596041          -9.55 <LDA_VEM> <tibble [54,684 × 3]> <tibble> #> 3    18 1001069          -9.59 <LDA_VEM> <tibble [54,684 × 3]> <tibble> #> 4    18 3146759          -9.77 <LDA_VEM> <tibble [54,684 × 3]> <tibble> #> 5    18 5745450          -9.79 <LDA_VEM> <tibble [54,684 × 3]> <tibble> # selected_models <- selected_models |> filter(K==5) selected_models <- selected_models |> mutate(model_id = paste0(K, \"_\", S)) idx <- combn(unique(selected_models$model_id), 2)  # Unique pairs of K  beta <- selected_models |> select(K, model_id, beta)  topic_pairs <- list() for (i in 1:ncol(idx)) {   sel <- beta |> filter(model_id %in% idx[, i])  # Two rows at a time    # Combine pair of rows to same row   topic_pairs[[i]] <- tibble_row(     K1 = sel[[1,\"K\"]], model1 = sel[[1,\"model_id\"]], beta1 = sel[[1,\"beta\"]],     K2 = sel[[2,\"K\"]], model2 = sel[[2,\"model_id\"]], beta2 = sel[[2,\"beta\"]]     )  } topic_pairs <- bind_rows(topic_pairs)  topic_pairs <- topic_pairs |>   mutate(      topics1 = map(beta1, \\(b1) {       b1 |>         pivot_wider(values_from = beta, names_from = topic) |>         select(-term)     }),      topics2 = map(beta2, \\(b2) {       b2 |>         pivot_wider(values_from = beta, names_from = topic) |>         select(-term)     }),      r = map2(topics1, topics2, \\(x1, x2) {       cor(x1, x2)     })#,      # cossim = map2(topics1, topics2, \\(x1, x2) {     #   cosine(x1, x2)     # })   ) topic_pairs #> # A tibble: 10 × 9 #>       K1 model1     beta1       K2 model2    beta2    topics1  topics2  r        #>    <int> <chr>      <list>   <int> <chr>     <list>   <list>   <list>   <list>   #>  1    18 18_5883911 <tibble>    18 18_95960… <tibble> <tibble> <tibble> <dbl[…]> #>  2    18 18_5883911 <tibble>    18 18_10010… <tibble> <tibble> <tibble> <dbl[…]> #>  3    18 18_5883911 <tibble>    18 18_31467… <tibble> <tibble> <tibble> <dbl[…]> #>  4    18 18_5883911 <tibble>    18 18_57454… <tibble> <tibble> <tibble> <dbl[…]> #>  5    18 18_9596041 <tibble>    18 18_10010… <tibble> <tibble> <tibble> <dbl[…]> #>  6    18 18_9596041 <tibble>    18 18_31467… <tibble> <tibble> <tibble> <dbl[…]> #>  7    18 18_9596041 <tibble>    18 18_57454… <tibble> <tibble> <tibble> <dbl[…]> #>  8    18 18_1001069 <tibble>    18 18_31467… <tibble> <tibble> <tibble> <dbl[…]> #>  9    18 18_1001069 <tibble>    18 18_57454… <tibble> <tibble> <tibble> <dbl[…]> #> 10    18 18_3146759 <tibble>    18 18_57454… <tibble> <tibble> <tibble> <dbl[…]> topic_pairs |> select(K1, K2, r) |>   mutate(similarity = map(r, \\(x) {     x |>       as_tibble(rownames = \"topic1\") |>       pivot_longer(!topic1, names_to = \"topic2\", values_to = \"r\") |>       summarise(similarity = sum(r > 0.9)/n(), .by = topic1)  # Threshold 0.9 for similarity. Reasonable?   })) |>   select(-r) |>   unnest(similarity) |>   summarise(mean_similarity = mean(similarity), .by = c(K1, topic1)) |>   mutate(topic1 = as.factor(as.integer(topic1)),          mean_similarity_by_ntopics = mean_similarity*K1) |>  # TODO: similarity depends somehow on number of topics   ggplot() +   geom_col(aes(x = topic1, y = mean_similarity)) +   geom_hline(yintercept = 1/optimal_k,linetype='dashed', color=c('red')) +   facet_grid(~K1, scales = \"free_x\") # topic_congruence <- list() # for (i in 1:nrow(topic_pairs)) { #   topic_congruence[[i]] <- topic_pairs$r[[i]] |> #   as_tibble(rownames = \"model1\") |> #   pivot_longer(cols = !model1, names_to = \"model2\", values_to = \"r\") |> #   ggplot(aes(x = model1, y = model2, fill = r, label = round(r, 2))) + #   geom_tile(show.legend = FALSE) + #   geom_text() + #   scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\")   # } # plot_grid(plotlist = topic_congruence) # topic_congruence <- list() # for (i in selected_models$K) { #   topic_congruence[[paste0(\"model-\", i)]] <- selected_models |> #   select(K, beta) |> #   unnest(beta) |> #   filter(K==i) |> #   pivot_wider(values_from = beta, names_from = topic) |> #   select(-term, -K) # } # topic_congruence # combn(selected_models$K, 2) # topic_congruence2 <- list() # for (idx_col in 1:ncol(combn(selected_models$K, 2))) { #   idx <- combn(selected_models$K, 2)[, idx_col] #   correlation <- cor(topic_congruence[[paste0(\"model-\", idx[1])]], topic_congruence[[paste0(\"model-\", idx[2])]]) #   topic_congruence2[[paste0(\"model-\", idx[1], \"-\", idx[2])]] <- correlation |>  #     as_tibble(rownames = \"topic1\") |> #     pivot_longer(!topic1, names_to = \"topic2\", values_to = \"r\") # } # topic_congruence2 <- bind_rows(topic_congruence2, .id = \"model-K\") # topic_congruence2 # topic_congruence2 |> #   mutate(`model-K`= factor(`model-K`), #          topic1 = factor(as.integer(topic1)), #          topic2 = factor(as.integer(topic2)), #          r = round(r, 2)) |> #   ggplot(aes(x = topic1, y = topic2, fill = r, label = r)) + #   geom_tile(show.legend = FALSE) + #   geom_text() + #   theme(axis.text.x = element_text(angle = 90)) + #   labs(title = \"Topic congruence between different models\") + #   scale_fill_viridis_c(option = \"A\") + #   facet_wrap(~`model-K`, scales = \"free\", ncol = 2) final_models <- selected_models |>   slice_max(mean_coherence, n = 1, by = K) # final_models <- selected_models final_models |>   select(K, theta) |>   unnest(theta) |>   mutate(topic = factor(as.integer(topic))) |>   summarise(mean_theta = mean(theta),             total_theta = sum(theta), .by = c(K, topic)) |>   ggplot() +   geom_col(aes(x = topic, y = total_theta)) +   labs(title = \"Topic prevalence\") +   facet_wrap(~K, scales = \"free\") # final_models |> #   select(K, theta) |> #   unnest(theta) |> #   ggplot(aes(x = theta, fill = K)) + #   geom_histogram(binwidth = 0.1, show.legend = FALSE) + #   labs(title = \"Topic histograms\") + #   theme(axis.text.x = element_text(angle = 90)) + #   facet_wrap(K~topic, scales = \"free_y\") final_models |>   select(K, theta) |>   unnest(theta) |>   slice_max(theta, n = 1, by = c(K, document)) |>   mutate(topic = factor(as.integer(topic))) |>   ggplot(aes(x = topic, y = theta, group = topic)) +   geom_boxplot(show.legend = FALSE) +   labs(title = \"Distributions of largest topics per document\") +   facet_wrap(~K, scales = \"free\") # final_models |> #   select(K, theta) |> #   unnest(theta) |> #   mutate(topic = factor(as.integer(topic))) |> #   ggplot(aes(x = topic, y = theta, group = topic)) + #   geom_boxplot(show.legend = FALSE) + #   labs(title = \"Topic distributions per document\") + #   facet_wrap(~K, scales = \"free\") final_models |>   select(K, beta) |>   unnest(beta) |>   slice_max(beta, n = 25, by = c(K, topic)) |>   group_by(K) |>   add_count(term) |>   ungroup() |>   mutate(is_unique = n == 1,          K = factor(K),          topic = factor(topic),          term = reorder_within(term, beta, topic)) |>   ggplot(aes(x = beta, y = term, fill = K)) +   geom_col(show.legend = FALSE) +   labs(title = \"25 terms with highest probability per topic\") +   scale_y_reordered() +   facet_wrap(K ~ topic, scales = \"free\") final_models |>   select(K, beta) |>   unnest(beta) |>   slice_max(beta, n = 25, by = c(K, topic)) |>   group_by(K) |>   add_count(term) |>   ungroup() |>   mutate(is_unique = n == 1,          K = factor(K),          topic = factor(topic),          term = reorder_within(term, beta, topic)) |>   filter(is_unique) |>   ggplot(aes(x = beta, y = term, fill = K)) +   geom_col(show.legend = FALSE) +   labs(title = \"25 terms with highest probability per topic\") +   scale_y_reordered() +   facet_wrap(K ~ topic, scales = \"free\") # for (i in unique(beta_matrix$model)) { #   print( #     beta_matrix |> #       filter(model == i) |> #       group_by(topic) |> #       slice_max(beta, n = 25) |> #       mutate(topic = as.factor(paste0(\"Topic_\", topic))) |> #       ggplot(aes(x = beta, y = reorder(term, beta), fill = topic)) + #       geom_col(show.legend = FALSE) + #       scale_fill_viridis_d(option = \"A\") + #       facet_wrap(~topic, scales = \"free\") + #       labs(title = \"Top 25 terms by topic\", subtitle = paste0(\"Model_\", i), x = \"Probability\", y = \"Term\") #   ) # } # for (i in unique(beta_matrix$model)) { #   print( #     beta_matrix |> #       filter(model == i) |> #       group_by(topic) |> #       slice_max(beta, n = 25) |> #       mutate(topic = as.factor(paste0(\"Topic_\", topic))) |> #       ungroup() |> #       add_count(term, name = \"in_topics\") |> #       filter(in_topics == 1) |> #       ggplot(aes(x = beta, y = reorder(term, beta), fill = topic)) + #       geom_col(show.legend = FALSE) + #       scale_fill_viridis_d(option = \"A\") + #       facet_wrap(~topic, scales = \"free\", ncol = 2) + #       labs(title = \"Unique terms out of top 25 terms by topic\", subtitle = paste0(\"Model_\", i), x = \"Probability\", y = \"Term\") #   ) # } # doc_topics <- lapply(lda_models, function(x) { #   x |> #     tidytext::tidy(matrix = \"gamma\") |> #     tidytext::cast_dfm(document, topic, gamma) # }) # doc_topics # join_y <- function(df) { #   df |> #     left_join(taantuvat, by = join_by(\"doc_id\" == \"kunta\")) |> #     filter(!is.na(luokka)) # } # summarise_topics <- function(df, ...) { #   df |> #     mutate(topic = factor(as.integer(topic))) |> #     summarise(...) # } # plot_topic_mean_prop <- function(df, ...) { #   df |> #     ggplot() + #     geom_point(aes(...)) # } # lapply(doc_topics, function(x) {  #   x |> #     gather_topic_prob() |> #     join_y() |> #     summarise_topics(sum_prop = sum(prop), .by = c(luokka, topic)) |> #     plot_topic_mean_prop(x = topic, y = sum_prop, colour = luokka) # } # ) # lapply(doc_topics, function(x) {  #   x |> #     gather_topic_prob() |> #     join_y() |> #     summarise_topics(mean_prop = mean(prop), .by = c(luokka, topic)) |> #     plot_topic_mean_prop(x = topic, y = mean_prop, colour = luokka) # } # ) # taantuvat |> #   filter(kunta %in% unique(aspol$kunta)) |> #   mutate(luokka = if_else(suht_muutos_2010_2022 > 0, \"Kasvava\", \"Taantuva\")) |> #   count(luokka, sort = TRUE) # purrr::imap(doc_topics, function(x, name) {  #   x |> #     gather_topic_prob() |> #     join_y() |> #     select(doc_id, topic, prop, suht_muutos_2010_2022, luokka) |> #     tidyr::pivot_wider(names_from = topic, values_from = prop) |> #     rename_with(~ paste0(\"topic_\", .x, recycle0 = TRUE), matches(\"^[0-9]+$\")) |> #     write.csv(paste0(\"topic_\", name, \".csv\")) # }) # dat <- doc_topics$k_5 |>  #   gather_topic_prob() |> #   join_y() |> #   mutate(luokka = if_else(suht_muutos_2010_2022 > 0, \"Kasvava\", \"Taantuva\"), #          topic = factor(as.integer(topic))) |> #   select(topic, prop, luokka) # dat # for (i in seq_along(unique(dat$topic))) { #   cat(\"Topic \", i) #   print( #     dat |> filter(topic == i) |> #     ggplot() + #     geom_boxplot(aes(x = luokka, y = prop)) + #       labs(title = paste0(\"Topic \", i)) #     ) #   print( #     dat |> #       filter(topic == i) |> #       kruskal.test(luokka ~ prop, data = _) #   ) # } # doc_topics$k_5 |> #   gather_topic_prob() |> #   join_y() |> #   mutate(luokka = if_else(suht_muutos_2010_2022 > 0, \"Kasvava\", \"Taantuva\"), #          topic = factor(as.integer(topic))) |> #   summarise(topic_sum = sum(prop),  #             topic_mean = mean(prop), #             .by = c(luokka, topic)) |> #   kruskal.test(topic_sum ~ luokka) # lapply(doc_topics, function(x) {  #   x |> #     gather_topic_prob() |> #     join_y() |> #     mutate(luokka = if_else(suht_muutos_2010_2022 > 0, \"Kasvava\", \"Taantuva\"), #            topic = factor(as.integer(topic))) |> #     summarise(mean_prop = mean(prop), .by = c(luokka, topic)) |> #     tidyr::pivot_wider(names_from = luokka, values_from = mean_prop) |> #     mutate(diff = Kasvava-Taantuva) |> #     ggplot() + #     geom_point(aes(x = topic, y = diff)) + #     ylim(-0.4, 0.4) + #     geom_hline(yintercept = 0) # }) # lapply(doc_topics, function(x) {  #   x |> #     gather_topic_prob() |> #     join_y() |> #     mutate(luokka = if_else(suht_muutos_2010_2022 > 0, \"Kasvava\", \"Taantuva\"), #            topic = factor(as.integer(topic))) |> #     summarise(topic_sum = sum(prop),  #               topic_mean = mean(prop), #               .by = c(luokka, topic)) |> #     ggplot() + #     geom_tile(aes(x = topic, y = luokka, fill = topic_sum)) + #     scale_fill_viridis_c(option = \"A\") # } # ) # lapply(doc_topics, function(x) {  #   x |> #     gather_topic_prob() |> #     join_y() |> #     mutate(luokka = if_else(suht_muutos_2010_2022 > 0, \"Kasvava\", \"Taantuva\"), #            topic = factor(as.integer(topic))) |> #     summarise(topic_sum = sum(prop),  #               topic_mean = mean(prop), #               .by = c(luokka, topic)) |> #     ggplot() + #     geom_tile(aes(x = topic, y = luokka, fill = topic_mean)) + #     scale_fill_viridis_c(option = \"A\") # } # ) # lapply(doc_topics, function(x) {  #   x |> #     gather_topic_prob() |> #     join_y() |> #     mutate(luokka = if_else(suht_muutos_2010_2022 > 0, \"Kasvava\", \"Taantuva\"), #            topic = factor(as.integer(topic))) |> #     summarise(mean_prop = mean(prop), .by = c(luokka, topic)) |> #     tidyr::pivot_wider(names_from = luokka, values_from = mean_prop) |> #     mutate(diff = Kasvava-Taantuva) |> #     tidyr::pivot_longer(Kasvava:Taantuva, names_to = \"luokka\", values_to = \"prop\") |> #     ggplot() + #     geom_tile(aes(x = topic, y = luokka, fill = diff)) + #     scale_fill_distiller(palette = \"Spectral\") # }) # titles <- aspol |>  #   group_by(kunta) |>  #   slice_head(n=10) |>  #   summarise(title = paste(FORM, collapse = \" \")) |> #   inner_join(taantuvat) # titles # titles_per_topics <- lapply(doc_topics, function(x) { #   gather_topic_prob(x) |> #     slice_max(order_by = prop, n = 1, by = doc_id) |> #     left_join(titles, by = join_by(\"doc_id\" == \"kunta\")) #   }) # titles_per_topics # titles_per_topics$k_5 |> #   filter(topic==3) |> #   select(doc_id, title) # doc_topics$k_5 |> convert(to = \"data.frame\") |> #   tidyr::pivot_longer(!doc_id, names_to = \"topic\", values_to = \"prop\") |> #   left_join(taantuvat, by = join_by(\"doc_id\" == \"kunta\")) |> #   filter(!is.na(luokka)) |> #   group_by(luokka, topic) |> #   summarise(mean_prop = mean(prop)) |> #   ggplot() + #   geom_point(aes(x = topic, y = mean_prop, colour = luokka)) # doc_topics$k_5 |> convert(to = \"data.frame\") |> #   tidyr::pivot_longer(!doc_id, names_to = \"topic\", values_to = \"prop\") |> #   ggplot() + #   geom_col(aes(x = prop, y = topic))"},{"path":"https://stranmax.github.io/rfintext/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Max Strandén. Maintainer.","code":""},{"path":"https://stranmax.github.io/rfintext/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Strandén M (2024). rfintext: Text mining projects finnish documents. R package version 0.1.0, https://stranmax.github.io/rfintext/, https://github.com/StranMax/rfintext.","code":"@Manual{,   title = {rfintext: Text mining projects of finnish documents},   author = {Max Strandén},   year = {2024},   note = {R package version 0.1.0, https://stranmax.github.io/rfintext/},   url = {https://github.com/StranMax/rfintext}, }"},{"path":"https://stranmax.github.io/rfintext/index.html","id":"rfintext","dir":"","previous_headings":"","what":"Text mining projects of finnish documents","title":"Text mining projects of finnish documents","text":"Main purpose package : * Share text mining data sets easily. * Provide simple pre processing functions. Nothing special wrappers around dplyr tidyverse functions. * Document steps reproducible data analysis. NOTE! strongly recommended use functions directly packages since helper functions provided highly likely change many times decide look like function. package contains following data sets: - aspol: Finnish housing policy documents. - strategia: Strategy documents Finnish municipalities. data sets might added later. Currently functionalities tested aspol data set .","code":""},{"path":"https://stranmax.github.io/rfintext/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Text mining projects of finnish documents","text":"can install development version rfintext like :","code":"# install.packages(\"devtools\") devtools::install_github(\"StranMax/rfintext\") library(rfintext) library(tidyverse)"},{"path":"https://stranmax.github.io/rfintext/index.html","id":"data","dir":"","previous_headings":"","what":"Data","title":"Text mining projects of finnish documents","text":"Number documents aspol data set 68 Sentence nro 43 Espoo document: Top 20 words: Power lemmatization, number different word forms lemma: 10 common word forms lemma “asunto”: Word forms different classes: Different word forms, word classes inflections single lemma “olla”:","code":"aspol |> filter(kunta == \"Espoo\", sent == 43) #> # A tibble: 26 × 13 #>    kunta  sent ID    FORM                  LEMMA                 UPOSTAG XPOSTAG FEATS                                                                  HEAD  DEPREL    DEPS  MISC                 doc               #>    <chr> <int> <chr> <chr>                 <chr>                 <chr>   <chr>   <chr>                                                                  <chr> <chr>     <chr> <chr>                <chr>             #>  1 Espoo    43 1     Asumisen              asuminen              NOUN    _       Case=Gen|Derivation=Minen|Number=Sing                                  4     nmod:poss _     \"_\"                  espoo_2023.conllu #>  2 Espoo    43 2     ja                    ja                    CCONJ   _       _                                                                      3     cc        _     \"_\"                  espoo_2023.conllu #>  3 Espoo    43 3     maankäytön            maan#käyttö           NOUN    _       Case=Gen|Number=Sing                                                   1     conj      _     \"_\"                  espoo_2023.conllu #>  4 Espoo    43 4     periaatteiden         periaate              NOUN    _       Case=Gen|Number=Plur                                                   5     nmod:gobj _     \"_\"                  espoo_2023.conllu #>  5 Espoo    43 5     laadinnassa           laadinta              NOUN    _       Case=Ine|Number=Sing                                                   6     nmod      _     \"_\"                  espoo_2023.conllu #>  6 Espoo    43 6     tärkeimpiä            tärkeä                ADJ     _       Case=Par|Degree=Sup|Number=Plur                                        8     amod      _     \"SpacesAfter=\\\\r\\\\n\" espoo_2023.conllu #>  7 Espoo    43 7     ratkaistavia          ratkaista             VERB    _       Case=Par|Degree=Pos|Number=Plur|PartForm=Pres|VerbForm=Part|Voice=Pass 8     acl       _     \"_\"                  espoo_2023.conllu #>  8 Espoo    43 8     asioita               asia                  NOUN    _       Case=Par|Number=Plur                                                   12    nsubj:cop _     \"_\"                  espoo_2023.conllu #>  9 Espoo    43 9     ovat                  olla                  AUX     _       Mood=Ind|Number=Plur|Person=3|Tense=Pres|VerbForm=Fin|Voice=Act        12    aux       _     \"_\"                  espoo_2023.conllu #> 10 Espoo    43 10    olleet                olla                  AUX     _       Case=Nom|Degree=Pos|Number=Plur|PartForm=Past|VerbForm=Part|Voice=Act  12    cop       _     \"_\"                  espoo_2023.conllu #> 11 Espoo    43 11    asuntotuotannon       asunto#tuotanto       NOUN    _       Case=Gen|Number=Sing                                                   12    nmod:poss _     \"_\"                  espoo_2023.conllu #> 12 Espoo    43 12    monipuolisuuteen      monipuolisuus         NOUN    _       Case=Ill|Derivation=Inen,Vs|Number=Sing                                0     root      _     \"SpaceAfter=No\"      espoo_2023.conllu #> 13 Espoo    43 13    ,                     ,                     PUNCT   _       _                                                                      14    punct     _     \"SpacesAfter=\\\\r\\\\n\" espoo_2023.conllu #> 14 Espoo    43 14    maanhankintaan        maan#hankinta         NOUN    _       Case=Ill|Number=Sing                                                   12    conj      _     \"SpaceAfter=No\"      espoo_2023.conllu #> 15 Espoo    43 15    ,                     ,                     PUNCT   _       _                                                                      17    punct     _     \"_\"                  espoo_2023.conllu #> 16 Espoo    43 16    tasaiseen             tasainen              ADJ     _       Case=Ill|Degree=Pos|Derivation=Inen|Number=Sing                        17    amod      _     \"_\"                  espoo_2023.conllu #> 17 Espoo    43 17    vuokratulovirtaan     vuokra#tulo#virta     NOUN    _       Case=Ill|Number=Sing                                                   12    conj      _     \"_\"                  espoo_2023.conllu #> 18 Espoo    43 18    sekä                  sekä                  CCONJ   _       _                                                                      20    cc        _     \"_\"                  espoo_2023.conllu #> 19 Espoo    43 19    riittävään            riittävä              ADJ     _       Case=Ill|Degree=Pos|Number=Sing                                        20    amod      _     \"_\"                  espoo_2023.conllu #> 20 Espoo    43 20    yritystonttivarantoon yritys#tontti#varanto NOUN    _       Case=Ill|Number=Sing                                                   12    conj      _     \"_\"                  espoo_2023.conllu #> 21 Espoo    43 21    ja                    ja                    CCONJ   _       _                                                                      23    cc        _     \"_\"                  espoo_2023.conllu #> 22 Espoo    43 22    yritystonttien        yritys#tontti         NOUN    _       Case=Gen|Number=Plur                                                   23    nmod:gobj _     \"_\"                  espoo_2023.conllu #> 23 Espoo    43 23    luovutukseen          luovutus              NOUN    _       Case=Ill|Number=Sing                                                   12    conj      _     \"_\"                  espoo_2023.conllu #> 24 Espoo    43 24    liittyvät             liittyä               VERB    _       Case=Nom|Degree=Pos|Number=Plur|PartForm=Pres|VerbForm=Part|Voice=Act  25    acl       _     \"_\"                  espoo_2023.conllu #> 25 Espoo    43 25    kysymykset            kysymys               NOUN    _       Case=Nom|Number=Plur                                                   12    conj      _     \"SpaceAfter=No\"      espoo_2023.conllu #> 26 Espoo    43 26    .                     .                     PUNCT   _       _                                                                      12    punct     _     \"SpacesAfter=\\\\r\\\\n\" espoo_2023.conllu aspol |>   dplyr::filter(UPOSTAG %in% c(\"NOUN\", \"VERB\", \"ADJ\", \"ADV\")) |>   dplyr::count(LEMMA, UPOSTAG, sort = TRUE) #> # A tibble: 20,180 × 3 #>    LEMMA           UPOSTAG     n #>    <chr>           <chr>   <int> #>  1 kaupunki        NOUN     4081 #>  2 asunto          NOUN     3954 #>  3 vuosi           NOUN     3683 #>  4 asuminen        NOUN     3080 #>  5 alue            NOUN     2888 #>  6 kunta           NOUN     2601 #>  7 myös            ADV      1945 #>  8 tavoite         NOUN     1911 #>  9 uusi            ADJ      1504 #> 10 olla            VERB     1491 #> 11 osa             NOUN     1406 #> 12 tulla           VERB     1306 #> 13 ohjelma         NOUN     1258 #> 14 asukas          NOUN     1252 #> 15 palvelu         NOUN     1236 #> 16 tontti          NOUN     1214 #> 17 rakentaminen    NOUN     1103 #> 18 noin            ADV      1101 #> 19 määrä           NOUN     1092 #> 20 asunto#tuotanto NOUN      921 #> # ℹ 20,160 more rows aspol |>   group_by(LEMMA) |>   summarise(taivutusmuodot = length(unique(FORM))) |>   arrange(desc(taivutusmuodot)) #> # A tibble: 34,935 × 2 #>    LEMMA    taivutusmuodot #>    <chr>             <int> #>  1 olla                 85 #>  2 suuri                78 #>  3 asunto               74 #>  4 tehdä                72 #>  5 saada                70 #>  6 hyvä                 68 #>  7 rakentaa             65 #>  8 tämä                 64 #>  9 se                   63 #> 10 tavoite              61 #> # ℹ 34,925 more rows aspol |>   filter(LEMMA == \"asunto\") |>   count(FORM, FEATS, sort = TRUE) #> # A tibble: 81 × 3 #>    FORM       FEATS                    n #>    <chr>      <chr>                <int> #>  1 asuntojen  Case=Gen|Number=Plur   880 #>  2 asuntoa    Case=Par|Number=Sing   516 #>  3 asuntoja   Case=Par|Number=Plur   472 #>  4 asunnot    Case=Nom|Number=Plur   317 #>  5 asunnon    Case=Gen|Number=Sing   306 #>  6 Asuntojen  Case=Gen|Number=Plur   240 #>  7 asunto-    Case=Nom|Number=Sing   190 #>  8 asunnoista Case=Ela|Number=Plur   171 #>  9 asunto     Case=Nom|Number=Sing   123 #> 10 Asunnot    Case=Nom|Number=Plur    98 #> # ℹ 71 more rows aspol |>   group_by(FORM) |>   summarise(unique_sanaluokat = length(unique(UPOSTAG))) |>   arrange(desc(unique_sanaluokat)) #> # A tibble: 69,686 × 2 #>    FORM  unique_sanaluokat #>    <chr>             <int> #>  1 .                     9 #>  2 /                     9 #>  3 o                     9 #>  4 -                     6 #>  5 @                     6 #>  6 Yli                   6 #>  7 –                     6 #>  8 !                     5 #>  9 %                     5 #> 10 )                     5 #> # ℹ 69,676 more rows aspol |>   filter(LEMMA == \"olla\") |>   count(FORM, LEMMA, UPOSTAG, FEATS, sort = TRUE) #> # A tibble: 130 × 5 #>    FORM     LEMMA UPOSTAG FEATS                                                                     n #>    <chr>    <chr> <chr>   <chr>                                                                 <int> #>  1 on       olla  AUX     Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin|Voice=Act        9847 #>  2 ovat     olla  AUX     Mood=Ind|Number=Plur|Person=3|Tense=Pres|VerbForm=Fin|Voice=Act        1653 #>  3 oli      olla  AUX     Mood=Ind|Number=Sing|Person=3|Tense=Past|VerbForm=Fin|Voice=Act         762 #>  4 ole      olla  AUX     Connegative=Yes|Mood=Ind|Tense=Pres|VerbForm=Fin                        487 #>  5 ollut    olla  AUX     Case=Nom|Degree=Pos|Number=Sing|PartForm=Past|VerbForm=Part|Voice=Act   450 #>  6 olla     olla  AUX     InfForm=1|Number=Sing|VerbForm=Inf|Voice=Act                            447 #>  7 on       olla  AUX     Mood=Ind|Number=Sing|Person=0|Tense=Pres|VerbForm=Fin|Voice=Act         255 #>  8 olemassa olla  VERB    Case=Ine|InfForm=3|Number=Sing|VerbForm=Inf|Voice=Act                   229 #>  9 olevien  olla  VERB    Case=Gen|Degree=Pos|Number=Plur|PartForm=Pres|VerbForm=Part|Voice=Act   172 #> 10 olisi    olla  AUX     Mood=Cnd|Number=Sing|Person=3|VerbForm=Fin|Voice=Act                    148 #> 11 olevat   olla  VERB    Case=Nom|Degree=Pos|Number=Plur|PartForm=Pres|VerbForm=Part|Voice=Act   134 #> 12 olevan   olla  VERB    Case=Gen|Degree=Pos|Number=Sing|PartForm=Pres|VerbForm=Part|Voice=Act   122 #> 13 ole      olla  VERB    Connegative=Yes|Mood=Ind|Tense=Pres|VerbForm=Fin                        119 #> 14 olevia   olla  VERB    Case=Par|Degree=Pos|Number=Plur|PartForm=Pres|VerbForm=Part|Voice=Act   108 #> 15 oleva    olla  VERB    Case=Nom|Degree=Pos|Number=Sing|PartForm=Pres|VerbForm=Part|Voice=Act   100 #> 16 olevaa   olla  VERB    Case=Par|Degree=Pos|Number=Sing|PartForm=Pres|VerbForm=Part|Voice=Act    77 #> 17 olevan   olla  AUX     Case=Gen|Degree=Pos|Number=Sing|PartForm=Pres|VerbForm=Part|Voice=Act    71 #> 18 olivat   olla  AUX     Mood=Ind|Number=Plur|Person=3|Tense=Past|VerbForm=Fin|Voice=Act          71 #> 19 olleet   olla  AUX     Case=Nom|Degree=Pos|Number=Plur|PartForm=Past|VerbForm=Part|Voice=Act    66 #> 20 on       olla  VERB    Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin|Voice=Act          58 #> # ℹ 110 more rows"},{"path":"https://stranmax.github.io/rfintext/reference/aspol.html","id":null,"dir":"Reference","previous_headings":"","what":"Document term table in tidy format of Finnish housing policy documents — aspol","title":"Document term table in tidy format of Finnish housing policy documents — aspol","text":"aspol aspol_filtered analysis ready data set housing policy documents. info format https://universaldependencies.org/format.html","code":""},{"path":"https://stranmax.github.io/rfintext/reference/aspol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Document term table in tidy format of Finnish housing policy documents — aspol","text":"","code":"aspol"},{"path":"https://stranmax.github.io/rfintext/reference/aspol.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Document term table in tidy format of Finnish housing policy documents — aspol","text":"data frame rows columns: kunta Municipality name sent Sentence number per document/municipality ID Word index, integer starting 1 new sentence FORM Word form punctuation symbol LEMMA Lemma stem word form UPOSTAG Universal part--speech tag XPOSTAG Language-specific part--speech FEATS List morphological features HEAD Head current word, either value ID zero (0) DEPREL Universal dependency relation HEAD DEPS Enhanced dependency graph form list head-deprel pairs MISC annotation doc Document name read ","code":""},{"path":"https://stranmax.github.io/rfintext/reference/aspol.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Document term table in tidy format of Finnish housing policy documents — aspol","text":"Finnish municipalities","code":""},{"path":"https://stranmax.github.io/rfintext/reference/aspol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Document term table in tidy format of Finnish housing policy documents — aspol","text":"","code":"aspol #> # A tibble: 451,660 × 13 #>    kunta   sent ID    FORM  LEMMA UPOSTAG XPOSTAG FEATS HEAD  DEPREL DEPS  MISC  #>    <chr>  <int> <chr> <chr> <chr> <chr>   <chr>   <chr> <chr> <chr>  <chr> <chr> #>  1 Enont…     1 1     ﻿Khall ﻿Khall PROPN   _       Case… 0     root   _     \"_\"   #>  2 Enont…     1 2     19.4… 19.4… NUM     _       _     1     nmod   _     \"_\"   #>  3 Enont…     1 3     $     $     PUNCT   _       _     4     punct  _     \"_\"   #>  4 Enont…     1 4     126   126   NUM     _       NumT… 1     nummod _     \"Spa… #>  5 Enont…     2 1     (     (     PUNCT   _       _     2     punct  _     \"Spa… #>  6 Enont…     2 2     N     N     NOUN    _       Abbr… 0     root   _     \"Spa… #>  7 Enont…     3 1     Enon… Enon… PROPN   _       Case… 0     root   _     \"Spa… #>  8 Enont…     4 1     KUNTA kunta NOUN    _       Case… 0     root   _     \"Spa… #>  9 Enont…     5 1     VUOK… vuok… NOUN    _       Case… 2     nmod:… _     \"Spa… #> 10 Enont…     5 2     KEHI… kehi… NOUN    _       Case… 0     root   _     \"Spa… #> # ℹ 451,650 more rows #> # ℹ 1 more variable: doc <chr>"},{"path":"https://stranmax.github.io/rfintext/reference/calculate_doc_freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Calclulate document frequency — calculate_doc_freq","title":"Calclulate document frequency — calculate_doc_freq","text":"Adds document frequencies new column. Document frequency describes many documents term appears. Useful finding common terms appearing almost documents rare terms appearing single documents.","code":""},{"path":"https://stranmax.github.io/rfintext/reference/calculate_doc_freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calclulate document frequency — calculate_doc_freq","text":"","code":"calculate_doc_freq(df, doc, term)"},{"path":"https://stranmax.github.io/rfintext/reference/calculate_doc_freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calclulate document frequency — calculate_doc_freq","text":"df tidy data frame one term per row doc column document id term column terms","code":""},{"path":"https://stranmax.github.io/rfintext/reference/calculate_doc_freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calclulate document frequency — calculate_doc_freq","text":"tidy data frame added column df giving document frequencies         terms df_ratio giving relative document frequency","code":""},{"path":"https://stranmax.github.io/rfintext/reference/calculate_semantic_coherence.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — calculate_semantic_coherence","title":"Title — calculate_semantic_coherence","text":"Title","code":""},{"path":"https://stranmax.github.io/rfintext/reference/calculate_semantic_coherence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — calculate_semantic_coherence","text":"","code":"calculate_semantic_coherence(dtm, K_values, n_seeds, seed)"},{"path":"https://stranmax.github.io/rfintext/reference/calculate_semantic_coherence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — calculate_semantic_coherence","text":"dtm document term matrix (quanteda::dfm tm::tm) K_values vector k values n_seeds number different random initializations every k value seed seeds reproducible","code":""},{"path":"https://stranmax.github.io/rfintext/reference/calculate_semantic_coherence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — calculate_semantic_coherence","text":"tibble LDA models semantic coherence","code":""},{"path":"https://stranmax.github.io/rfintext/reference/calculate_semantic_coherence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — calculate_semantic_coherence","text":"","code":"if (FALSE) { dtm <- aspol |> preprocess_corpus(kunta) |>  dplyr::count(kunta, LEMMA) |>  tidytext::cast_dfm(kunta, LEMMA, n)   future::plan(future::multisession, workers = future::availableCores(logical = FALSE) - 1)   progressr::with_progressor({calculate_semantic_coherence(dtm = dtm, K_values = seq(5, 10, by = 5),                               n_seeds = 1, seed = 1234)}) }"},{"path":"https://stranmax.github.io/rfintext/reference/compute_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — compute_error","title":"Title — compute_error","text":"Title","code":""},{"path":"https://stranmax.github.io/rfintext/reference/compute_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — compute_error","text":"","code":"compute_error(xgb_model, xgb_data_test)"},{"path":"https://stranmax.github.io/rfintext/reference/compute_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — compute_error","text":"xgb_model model returned xgb.train xgb_data_test xgb.DMatrix test data","code":""},{"path":"https://stranmax.github.io/rfintext/reference/compute_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — compute_error","text":"mean error value","code":""},{"path":"https://stranmax.github.io/rfintext/reference/corpus_to_dtm.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — corpus_to_dtm","title":"Title — corpus_to_dtm","text":"Title","code":""},{"path":"https://stranmax.github.io/rfintext/reference/corpus_to_dtm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — corpus_to_dtm","text":"","code":"corpus_to_dtm(df, doc, term)"},{"path":"https://stranmax.github.io/rfintext/reference/corpus_to_dtm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — corpus_to_dtm","text":"df tidy data frame one term per row doc document column term term column","code":""},{"path":"https://stranmax.github.io/rfintext/reference/corpus_to_dtm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — corpus_to_dtm","text":"quanteda dfm object","code":""},{"path":"https://stranmax.github.io/rfintext/reference/filter_upostag.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — filter_upostag","title":"Title — filter_upostag","text":"Title","code":""},{"path":"https://stranmax.github.io/rfintext/reference/filter_upostag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — filter_upostag","text":"","code":"filter_upostag(df, upostag)"},{"path":"https://stranmax.github.io/rfintext/reference/filter_upostag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — filter_upostag","text":"df data frame upostag character vector upostag classes","code":""},{"path":"https://stranmax.github.io/rfintext/reference/filter_upostag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — filter_upostag","text":"data frame","code":""},{"path":"https://stranmax.github.io/rfintext/reference/get_coherence.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — get_coherence","title":"Title — get_coherence","text":"Title","code":""},{"path":"https://stranmax.github.io/rfintext/reference/get_coherence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — get_coherence","text":"","code":"get_coherence(dfm, k)"},{"path":"https://stranmax.github.io/rfintext/reference/get_coherence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — get_coherence","text":"dfm quanteda dfm object k number topics classify","code":""},{"path":"https://stranmax.github.io/rfintext/reference/get_coherence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — get_coherence","text":"named vector k coherence score","code":""},{"path":"https://stranmax.github.io/rfintext/reference/get_doc_topic_prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — get_doc_topic_prob","title":"Title — get_doc_topic_prob","text":"Title","code":""},{"path":"https://stranmax.github.io/rfintext/reference/get_doc_topic_prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — get_doc_topic_prob","text":"","code":"get_doc_topic_prob(dfm, k)"},{"path":"https://stranmax.github.io/rfintext/reference/get_doc_topic_prob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — get_doc_topic_prob","text":"dfm quanteda dfm object k number topics classify","code":""},{"path":"https://stranmax.github.io/rfintext/reference/get_doc_topic_prob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — get_doc_topic_prob","text":"data frame document topic probablilities","code":""},{"path":"https://stranmax.github.io/rfintext/reference/get_train_test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — get_train_test_data","title":"Title — get_train_test_data","text":"Title","code":""},{"path":"https://stranmax.github.io/rfintext/reference/get_train_test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — get_train_test_data","text":"","code":"get_train_test_data(x, y, trainNames)"},{"path":"https://stranmax.github.io/rfintext/reference/get_train_test_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — get_train_test_data","text":"x quanteda dfm object y data frame classes trainNames character vector document names","code":""},{"path":"https://stranmax.github.io/rfintext/reference/get_train_test_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — get_train_test_data","text":"list xgb.DMatrices training testing","code":""},{"path":"https://stranmax.github.io/rfintext/reference/kuntalista.html","id":null,"dir":"Reference","previous_headings":"","what":"Housing policy documents in municipalities — kuntalista","title":"Housing policy documents in municipalities — kuntalista","text":"Manually made list municipalities housing policy documents","code":""},{"path":"https://stranmax.github.io/rfintext/reference/kuntalista.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Housing policy documents in municipalities — kuntalista","text":"","code":"kuntalista"},{"path":"https://stranmax.github.io/rfintext/reference/kuntalista.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Housing policy documents in municipalities — kuntalista","text":"data frame rows columns: kunta Kunta aspol Asuntopoliittinen ohjelma: Ohjelma laadittu, Ei ohjelmaa, Ei vastausta, Seutukuntaohjelma","code":""},{"path":"https://stranmax.github.io/rfintext/reference/kuntalista.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Housing policy documents in municipalities — kuntalista","text":"","code":"kuntalista #> # A tibble: 309 × 2 #>    kunta     aspol        #>    <chr>     <chr>        #>  1 Akaa      Ei vastausta #>  2 Alajärvi  Ei ohjelmaa  #>  3 Alavieska Ei vastausta #>  4 Alavus    Ei ohjelmaa  #>  5 Asikkala  Ei ohjelmaa  #>  6 Askola    Ei ohjelmaa  #>  7 Aura      Ei ohjelmaa  #>  8 Brändö    Ei mukana    #>  9 Eckerö    Ei mukana    #> 10 Enonkoski Ei vastausta #> # ℹ 299 more rows"},{"path":"https://stranmax.github.io/rfintext/reference/lda_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre calculated semantic coherence scores for aspol data set — lda_models","title":"Pre calculated semantic coherence scores for aspol data set — lda_models","text":"Mean semantic topic coherence score different combinations k random seed.","code":""},{"path":"https://stranmax.github.io/rfintext/reference/lda_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre calculated semantic coherence scores for aspol data set — lda_models","text":"","code":"lda_models"},{"path":"https://stranmax.github.io/rfintext/reference/lda_models.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pre calculated semantic coherence scores for aspol data set — lda_models","text":"data frame rows columns: K Number topics S Random seed mean_coherence Mean semantic topic coherence score","code":""},{"path":"https://stranmax.github.io/rfintext/reference/lda_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre calculated semantic coherence scores for aspol data set — lda_models","text":"","code":"lda_models #> # A tibble: 1,400 × 3 #>        K       S mean_coherence #>    <int>   <int>          <dbl> #>  1     3 3146759          -9.41 #>  2     3 3815732          -7.86 #>  3     3 7380638          -5.34 #>  4     3 8592264          -6.60 #>  5     3 1442259          -7.08 #>  6     3 1651155          -7.13 #>  7     3 9578454          -6.74 #>  8     3 2653332          -6.09 #>  9     3 1929552         -10.8  #> 10     3 6003578          -8.37 #> # ℹ 1,390 more rows"},{"path":"https://stranmax.github.io/rfintext/reference/mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — mod","title":"Title — mod","text":"Title","code":""},{"path":"https://stranmax.github.io/rfintext/reference/mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — mod","text":"","code":"mod(xgb_data_train, ...)"},{"path":"https://stranmax.github.io/rfintext/reference/mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — mod","text":"xgb_data_train xgb.DMatrix train data ... xgb model parameters","code":""},{"path":"https://stranmax.github.io/rfintext/reference/mod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — mod","text":"xgb model","code":""},{"path":"https://stranmax.github.io/rfintext/reference/plot_coherence.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — plot_coherence","title":"Title — plot_coherence","text":"Title","code":""},{"path":"https://stranmax.github.io/rfintext/reference/plot_coherence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — plot_coherence","text":"","code":"plot_coherence(mx)"},{"path":"https://stranmax.github.io/rfintext/reference/plot_coherence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — plot_coherence","text":"mx matrix columns k coh","code":""},{"path":"https://stranmax.github.io/rfintext/reference/plot_coherence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — plot_coherence","text":"ggplot2 object","code":""},{"path":"https://stranmax.github.io/rfintext/reference/preprocess_corpus.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess corpus object — preprocess_corpus","title":"Preprocess corpus object — preprocess_corpus","text":"Preprocessing pipeline: 1. Filter short terms 2. Filter common terms appearing documents 3. Filter terms appearing documents 4. Filter nouns","code":""},{"path":"https://stranmax.github.io/rfintext/reference/preprocess_corpus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess corpus object — preprocess_corpus","text":"","code":"preprocess_corpus(df, doc)"},{"path":"https://stranmax.github.io/rfintext/reference/preprocess_corpus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess corpus object — preprocess_corpus","text":"df Data frame tidytext format one token per document per line doc column document id","code":""},{"path":"https://stranmax.github.io/rfintext/reference/preprocess_corpus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess corpus object — preprocess_corpus","text":"cleaned data frame","code":""},{"path":"https://stranmax.github.io/rfintext/reference/preprocess_corpus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess corpus object — preprocess_corpus","text":"","code":"preprocess_corpus(aspol, kunta) #> # A tibble: 182,564 × 15 #>    kunta   sent ID    FORM  LEMMA UPOSTAG XPOSTAG FEATS HEAD  DEPREL DEPS  MISC  #>    <chr>  <int> <chr> <chr> <chr> <chr>   <chr>   <chr> <chr> <chr>  <chr> <chr> #>  1 Enont…     4 1     \"KUN… kunta NOUN    _       Case… 0     root   _     \"Spa… #>  2 Enont…     5 1     \"VUO… vuok… NOUN    _       Case… 2     nmod:… _     \"Spa… #>  3 Enont…     5 2     \"KEH… kehi… NOUN    _       Case… 0     root   _     \"Spa… #>  4 Enont…    19 2     \"teh… tehdä VERB    _       Mood… 0     root   _     \"_\"   #>  5 Enont…    21 1     \"\\fS… sisä… NOUN    _       Case… 0     root   _     \"Spa… #>  6 Enont…    21 3     \"Joh… johd… NOUN    _       Case… 1     appos  _     \"_\"   #>  7 Enont…    24 2     \"Väe… väes… NOUN    _       Case… 0     root   _     \"Spa… #>  8 Enont…    26 1     \"Eli… elin… NOUN    _       Case… 0     root   _     \"_\"   #>  9 Enont…    26 3     \"työ… työ#… NOUN    _       Case… 1     conj   _     \"Spa… #> 10 Enont…    38 1     \"Kii… kiin… NOUN    _       Case… 4     nsubj… _     \"_\"   #> # ℹ 182,554 more rows #> # ℹ 3 more variables: doc <chr>, df <int>, df_ratio <dbl>"},{"path":"https://stranmax.github.io/rfintext/reference/remove_foreign.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove foreign terms — remove_foreign","title":"Remove foreign terms — remove_foreign","text":"Foreign terms defined UPOSTAX==\"X\" FEATS==\"Foreign=Yes\"","code":""},{"path":"https://stranmax.github.io/rfintext/reference/remove_foreign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove foreign terms — remove_foreign","text":"","code":"remove_foreign(df)"},{"path":"https://stranmax.github.io/rfintext/reference/remove_foreign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove foreign terms — remove_foreign","text":"df tidy data frame one term per row","code":""},{"path":"https://stranmax.github.io/rfintext/reference/remove_foreign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove foreign terms — remove_foreign","text":"data frame foreign terms removed","code":""},{"path":"https://stranmax.github.io/rfintext/reference/remove_numbers.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove terms containing numbers — remove_numbers","title":"Remove terms containing numbers — remove_numbers","text":"Remove terms containing numbers","code":""},{"path":"https://stranmax.github.io/rfintext/reference/remove_numbers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove terms containing numbers — remove_numbers","text":"","code":"remove_numbers(df, term)"},{"path":"https://stranmax.github.io/rfintext/reference/remove_numbers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove terms containing numbers — remove_numbers","text":"df data frame term column terms","code":""},{"path":"https://stranmax.github.io/rfintext/reference/remove_numbers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove terms containing numbers — remove_numbers","text":"data frame","code":""},{"path":"https://stranmax.github.io/rfintext/reference/remove_short_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove short terms — remove_short_term","title":"Remove short terms — remove_short_term","text":"Remove short terms","code":""},{"path":"https://stranmax.github.io/rfintext/reference/remove_short_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove short terms — remove_short_term","text":"","code":"remove_short_term(df)"},{"path":"https://stranmax.github.io/rfintext/reference/remove_short_term.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove short terms — remove_short_term","text":"df data frame","code":""},{"path":"https://stranmax.github.io/rfintext/reference/remove_short_term.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove short terms — remove_short_term","text":"data frame","code":""},{"path":"https://stranmax.github.io/rfintext/reference/split_train_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — split_train_test","title":"Title — split_train_test","text":"Title","code":""},{"path":"https://stranmax.github.io/rfintext/reference/split_train_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — split_train_test","text":"","code":"split_train_test(data, classes, id, ratio = 0.7)"},{"path":"https://stranmax.github.io/rfintext/reference/split_train_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — split_train_test","text":"data data frame classes column giving classes id column identifying documents ratio ratio training data, defaults 0.7","code":""},{"path":"https://stranmax.github.io/rfintext/reference/split_train_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — split_train_test","text":"character vector id names","code":""},{"path":"https://stranmax.github.io/rfintext/reference/strategia.html","id":null,"dir":"Reference","previous_headings":"","what":"Corpus of Finnish municipalities strategies — strategia","title":"Corpus of Finnish municipalities strategies — strategia","text":"Analysis ready data set strategy documents made municipalities. info format https://universaldependencies.org/format.html","code":""},{"path":"https://stranmax.github.io/rfintext/reference/strategia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Corpus of Finnish municipalities strategies — strategia","text":"","code":"strategia"},{"path":"https://stranmax.github.io/rfintext/reference/strategia.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Corpus of Finnish municipalities strategies — strategia","text":"data frame rows columns: kunta Municipality name sent Sentence number per document/municipality ID Word index, integer starting 1 new sentence FORM Word form punctuation symbol LEMMA Lemma stem word form UPOSTAG Universal part--speech tag XPOSTAG Language-specific part--speech FEATS List morphological features HEAD Head current word, either value ID zero (0) DEPREL Universal dependency relation HEAD DEPS Enhanced dependency graph form list head-deprel pairs MISC annotation doc Document name read ","code":""},{"path":"https://stranmax.github.io/rfintext/reference/strategia.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Corpus of Finnish municipalities strategies — strategia","text":"Finnish municipalities","code":""},{"path":"https://stranmax.github.io/rfintext/reference/strategia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Corpus of Finnish municipalities strategies — strategia","text":"","code":"strategia #> # A tibble: 391,985 × 13 #>    kunta  sent ID    FORM   LEMMA UPOSTAG XPOSTAG FEATS HEAD  DEPREL DEPS  MISC  #>    <chr> <int> <chr> <chr>  <chr> <chr>   <chr>   <chr> <chr> <chr>  <chr> <chr> #>  1 Akaa      1 1     STRAT… stra… NOUN    _       Case… 0     root   _     \"Spa… #>  2 Akaa      2 1     Sujuv… suju… ADJ     _       Case… 2     amod   _     \"_\"   #>  3 Akaa      2 2     arjen  arki  NOUN    _       Case… 3     nmod:… _     \"_\"   #>  4 Akaa      2 3     Akaa   Akaa  PROPN   _       Case… 9     nsubj… _     \"_\"   #>  5 Akaa      2 4     2026   2026  NUM     _       NumT… 3     nummod _     \"Spa… #>  6 Akaa      2 5     Sujuv… suju… ADJ     _       Case… 6     amod   _     \"_\"   #>  7 Akaa      2 6     arjen  arki  NOUN    _       Case… 7     nmod:… _     \"_\"   #>  8 Akaa      2 7     Akaas… Akaa  PROPN   _       Case… 3     nmod   _     \"_\"   #>  9 Akaa      2 8     on     olla  AUX     _       Mood… 9     cop    _     \"_\"   #> 10 Akaa      2 9     helpp… help… ADJ     _       Case… 0     root   _     \"_\"   #> # ℹ 391,975 more rows #> # ℹ 1 more variable: doc <chr>"}]
